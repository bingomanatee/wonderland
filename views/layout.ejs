<!DOCTYPE html>
<html>
<head>
  <title>Wonderland Stories</title>
  <%
if (typeof account == 'undefined') {
  account = false;
}
if (typeof flashMessages == 'undefined') {
  flashMessages = false;
}
  %>
  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <link href='http://fonts.googleapis.com/css?family=Ubuntu:300,400,500,700,300italic,400italic,500italic,700italic'
        rel='stylesheet' type='text/css'>

  <!--
      Stylesheets and Preprocessors
      ==============================

      You can always bring in CSS files manually with `<link>` tags, or asynchronously
      using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
      of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, stylesheets from your `assets/styles` folder are included
      here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
      are supported. In production, your styles will be minified and concatenated into
      a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your CSS files
          + Import stylesheets from other directories
          + Use a different or additional preprocessor, like SASS, SCSS or Stylus
  -->

  <!--STYLES-->
  <link rel="stylesheet" href="/ui-grid/3.0.0-RC.18/ui-grid.min.css">
  <link rel="stylesheet" href="/bootstrap-3.3.2-dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="/styles/app.css">
  <link rel="stylesheet" href="/styles/stories.css">
  <!--STYLES END-->
</head>

<body ng-app="WonderlandApp">
<nav class="navbar navbar-inverse navbar-fixed-top">
  <div class="container">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar"
              aria-expanded="false" aria-controls="navbar">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="#">Wonderland</a>
    </div>
    <div id="navbar" class="collapse navbar-collapse">
      <ul class="nav navbar-nav">
        <li class="active"><a href="#">Home</a></li>
        <li><a href="#about">About</a></li>
        <li><a href="#contact">Contact</a></li>
        <% if (account) { %>
        <li><p class="navbar-text"> Logged in as <%- account.username %>
          </p></li>
        <li class="buttonWrapper">
          <a class="btn" href="/signout">
            Sign Out
          </a>
        </li>
        <% } else { %>
        <li class="buttonWrapper">
          <button class="btn" data-toggle="modal" data-target="#myModal">
            Sign In
          </button>
        </li>
        <% } %>
      </ul>

    </div>
    <!--/.nav-collapse -->
  </div>
</nav>

<div class="container">

  <% if (flashMessages && flashMessages.hasMessages()){ %>
  <% flashMessages.pullMessages(true).forEach(function(info) { %>
  <div class="alert alert-<%= info.msgType %> with-close" role="alert">
    <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span>
    </button>
    <%- info.content %>
    <img class="icon"/></div>
  <% }) // end forEach
  %>
  <% } // end if hasMessages
  %>
  <%- body %>
</div>
<!-- /.container -->

<!--
    Client-side Templates
    ========================

    HTML templates are important prerequisites of modern, rich client applications.
    To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
    that you load these templates client-side.

    By default, your Gruntfile is configured to automatically load and precompile
    client-side JST templates in your `assets/templates` folder, then
    include them here automatically (between TEMPLATES and TEMPLATES END).

    To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
    For example, here are a few things you could do:

        + Import templates from other directories
        + Use a different template engine (handlebars, jade, dust, etc.)
        + Internationalize your client-side templates using a server-side
          stringfile before they're served.
-->

<!--TEMPLATES-->

<!--TEMPLATES END-->
<% if (!account) { %>
<%- include stormpath/signin.ejs %>
<% } %>
<!--

  Client-side Javascript
  ========================

  You can always bring in JS files manually with `script` tags, or asynchronously
  on the client using a solution like AMD (RequireJS).  Or, if you like, you can
  take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

  By default, files in your `assets/js` folder are included here
  automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
  CoffeeScript (.coffee) are supported. In production, your scripts will be minified
  and concatenated into a single file.

  To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
  For example, here are a few things you could do:

      + Change the order of your scripts
      + Import scripts from other directories
      + Use a different preprocessor, like TypeScript

-->

<!--SCRIPTS-->
<script src="/js/dependencies/jquery/jquery-1.11.2.min.js"></script>
<script src="/js/dependencies/lodash/lodash.min.js"></script>
<script src="/js/dependencies/marked.min.js"></script>
<script src="/bootstrap-3.3.2-dist/js/bootstrap.min.js"></script>
<script src="/angular-1.3.11/angular.min.js"></script>
<script src="/angular-1.3.11/angular-sanitize.min.js"></script>
<script src="/angular-1.3.11/angular-messages.min.js"></script>
<script src="/ui-grid/3.0.0-RC.18/ui-grid.min.js"></script>
<script src="/angular-1.3.11/angular-resource.min.js"></script>
<script src="/ui-bootstrap/ui-bootstrap-tpls-0.9.0.min.js"></script>
<script src="/wonderland/app/app.js"></script>
<script src="/wonderland/app/form.js"></script>
<script src="/wonderland/app/models.js"></script>
<!--SCRIPTS END-->
<% if (test_mode) { %>

<script src="/angular-1.3.11/angular-mocks.js"></script>
<script src="/test/mockBackend.js"></script>
<script type="text/javascript">
  $('body').attr('ng-app', 'WonderlandAppE2E');
</script>
<% } // end if test_mode
%>
</body>
</html>

