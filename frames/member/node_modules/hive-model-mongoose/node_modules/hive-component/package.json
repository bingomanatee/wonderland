{
  "name": "hive-component",
  "version": "0.0.1a",
  "private": false,
  "scripts": {
    "start": "node index"
  },
  "dependencies": {
    "underscore": ">=1.4.2",
    "hive-configuration": ">=0.0.1b",
    "tap": "*",
    "gate": "*",
    "async": "~0.2.8"
  },
  "readme": "# Hive-Component\n\n`hive-component` is an npm base class that serves as a factory for the `hive-mvc` and `hive-loader` npm modules.\n\n## Usage\n\nHive Component is a factory to create custom components based on a `mixin` and `configuration`.\nAs an example say you want to design a compoennt to add, track and report tags. Tags in this example are lowercased strings,\nand you can't have duplicate tags.\n\nA component-using module for tags (`node_modules/tags.js') would be:\n\n```\nvar hc = require('./../index');\nvar config = require('hive-configuration');\nvar _ = require('underscore');\nvar util = require('util');\nvar _DEBUG = true;\n\nvar _mixins = {\n\tadd_tags: function (tags) {\n\t\t_.each(tags, _.bind(function (tag) {\n\t\t\tthis.add_tag(tag);\n\t\t}, this));\n\t},\n\n\tadd_tag: function (tag) {\n\t\tif (!tag) {\n\t\t\tthrow new Error('trying to add nothing')\n\t\t}\n\t\tif (!_.isString(tag)) {\n\t\t\tthrow new Error('attempt to add non-string tag: %s', util.inspect(tag));\n\t\t}\n\t\tthis._tags.set(tag.toLowerCase(), true);\n\t},\n\n\ttags: function () {\n\t\t// @NOTE: not best practice as it depends on internal structure of another module...\n\t\treturn _.sortBy(_.keys(this._tags.data), _.identity);\n\t},\n\n\tremove_tag: function (tag) {\n\t\tif (!tag) {\n\t\t\tthrow new Error('trying to remove nothing')\n\t\t}\n\t\tif (!_.isString(tag)) {\n\t\t\tthrow new Error('attempt to add non-string tag: %s', util.inspect(tag));\n\t\t}\n\t\tthis._tags.remove(tag);\n\t},\n\n\thas: function (tag) {\n\t\tif (!tag) {\n\t\t\tthrow new Error('trying to test nothing')\n\t\t}\n\t\tif (!_.isString(tag)) {\n\t\t\tthrow new Error('attempt to test non-string tag: %s', util.inspect(tag));\n\t\t}\n\n\t\treturn this._tags.has(tag);\n\t}\n}\n\nmodule.exports = function (tags, cb) {\n\tif (!tags) {\n\t\ttags = [];\n\t}\n\n\treturn hc(_mixins, {\n\t\ttags:       new config(),\n\t\tinit_tasks: [function (cb) {\n\t\t\tconsole.log('init_tasks')\n\t\t\tthis._tags = new config();\n\t\t\tthis.add_tags(tags);\n\t\t\tcb();\n\t\t}]\n\t}, cb);\n}\n```\n\nUsing your custom component would look like this: (a `tap` test)\n\n```\n\ntap.test('tags', function (t) {\n\tTags(['foo', 'bar'],\n\t\tfunction (err, tags) {\n\t\t\ttags.init(function () {\n\t\t\t\tt.ok(tags.has('foo'), 'tags has foo');\n\n\t\t\t\tt.ok(!tags.has('zoo'), 'tags does not have zoo');\n\t\t\t\tt.deepEqual(tags.tags(), ['bar', 'foo'], 'manifest of tags 1')\n\t\t\t\ttags.add_tag('zoo');\n\t\t\t\tt.ok(tags.has('zoo'), 'tags does not have zoo');\n\n\t\t\t\tt.deepEqual(tags.tags(), ['bar', 'foo', 'zoo'], 'manifest of tags 2');\n\n\t\t\t\tt.end();\n\t\t\t});\n\t\t}) // end test\n});\n\n\n```\n\nthe Component() function blends the mixins into a new Component object, and sets the configuration\nof the component.\n\n",
  "_id": "hive-component@0.0.1a",
  "description": "`hive-component` is an npm base class that serves as a factory for the `hive-mvc` and `hive-loader` npm modules.",
  "_from": "hive-component@~0.0.1"
}
